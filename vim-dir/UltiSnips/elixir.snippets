snippet fn "fn...end" w
fn $1 end
endsnippet

snippet do "do...end" b
$1 do
	${2:nil}
end
endsnippet

snippet mod "Module with @moduledoc" b
defmodule $1 do
	@moduledoc ${2:false}
end
endsnippet

snippet privmod "Module without @moduledoc" b
defmodule $1 do
	# $2

	@moduledoc false$3
end
endsnippet

snippet prot "Protocol" b
defprotocol $1 do
	@moduledoc ${2:false}
end
endsnippet

snippet struct "defstruct with typespec" bm
@enforce_keys [$1]
defstruct @enforce_keys

@type t :: %__MODULE__{${1/.*?:(.*?)(,|$)/\n		$1: nil,/g}}
endsnippet

snippet typed_struct "TypeStruct" bm
use TypedStruct

typedstruct ${1:module: MyStruct, }enforce: true do
	@typedoc ""
	field :one, String.t(), default: ""
	$2
end
endsnippet

snippet struct_full "defstruct with the trimmings" bm
@derive {Inspect, except: [:__private__]}
@enforce_keys [$1]
defstruct [
	__private__: %{},${1/.*?:(.*?)(,|$)/\n		$1: nil,/g}$2
]

@type t :: %__MODULE__{
	__private__: map(),${1/.*?:(.*?)(,|$)/\n		$1: nil,/g}${2/(.*?):.*?(,|$)/$1: nil,/g}
}

@spec validate(__MODULE__.t()) :: Result.ok_or(__MODULE__.t(), Ecto.Changeset.t())
def validate(%__MODULE__{} = self) do
	data = %__MODULE__{}
	params = Map.from_struct(self)

	types = %{
		__private__: :map,${1/.*?:(.*?)(,|$)/\n			$1: :string,/g}${2/(.*?):.*?(,|$)/$1: :string,/g}
	}

	{data, types}
	|> Ecto.Changeset.cast(params, Map.keys(types))
	|> Ecto.Changeset.apply_action(:validate)
end
endsnippet

snippet exception "Exception" bm
@enforce_keys [$1]
defexception @enforce_keys

@type t :: %__MODULE__{}

@impl Exception
def message(%__MODULE__{} = self) do
	Kernel.inspect(self)
end
endsnippet

snippet schema "Ecto schema" bm
alias Ecto.Changeset

use Ecto.Schema
import Changeset

@primary_key false
embedded_schema do
	$1
	timestamps(type: :utc_datetime_usec)
end

@type t :: %__MODULE__{
	$2
	inserted_at: DateTime.t(),
	updated_at: DateTime.t()
}$4

@spec new(map() | list()) :: Result.ok_or(__MODULE__.t(), Changeset.t())
def new(params \\\\ %{}), do: changeset_for_new(params) |> apply_action(:new)

@spec new!(map() | list()) :: __MODULE__.t()
def new!(params \\\\ %{}), do: changeset_for_new(params) |> apply_action!(:new)

@doc """
Use this instead of \`new/1\` to get Dialyzer to check field types on the input struct.
"""
@spec from_struct(__MODULE__.t()) :: Result.ok_or(__MODULE__.t(), Changeset.t())
def from_struct(%__MODULE__{} = self), do: self |> Map.from_struct() |> new()

@spec changeset_for_new(map() | list()) :: Changeset.t()
def changeset_for_new(params) do
	change(%__MODULE__{id: params[:id]})
	|> changeset(Enum.into(params, %{}))
end

@spec changeset(__MODULE__.t() | Changeset.t(), __MODULE__.t() | map()) :: Changeset.t()
def changeset(self, params \\\\ %{})

def changeset(%__MODULE__{} = self, %__MODULE__{} = params) do
	changeset(self, Map.from_struct(params))
end

def changeset(%__MODULE__{} = self, params) do
	change(self) |> changeset(params)
end

def changeset(%Changeset{} = changeset, params) do
	required = [${1/.*?(:.*?),.*?(?:\n|$)/\n			$1,/g}
	]
	changeset
	|> cast(params, required)
	|> validate_required(required)
end
endsnippet

snippet querymod "Ecto query module" bm
defmodule $1.Private.Queries.$2 do
	@moduledoc false

	alias $1.$2

	import Ecto.Query$3

	@type query :: ${2/.*\.(.*)$/$1/} | Ecto.Query.t()

	@spec base(query()) :: Ecto.Query.t()
	def base(query) do
		from x in query, order_by: [asc: :id]
	end
end
endsnippet

snippet query "Ecto query function" b
@spec $1(query()$3) :: Ecto.Query.t()
def $1(query$2) do
	from x in query, where: $4
end
endsnippet

snippet schemaless_changeset "Ecto Schemaless Changeset" bm
data = %{}

types = %{
	field_name: :string
}

{data, types}
|> Ecto.Changeset.cast(params, Map.keys(types))
|> Ecto.Changeset.apply_action(:modify)
endsnippet

snippet crud "CRUD for context module" bm
@spec create_$1(${4:map()}) :: Result.ok_or($2.t(), any())
def create_$1(${3:%{} = params}) do
	$2.changeset_for_new(${5:params})
	|> Repo.insert()
end

@spec list_$1s() :: Result.ok_or([$2.t()], any())
def list_$1s() do
	$2
	|> Private.Queries.$2.base()
	|> Repo.all()
	|> Result.from()
end

@spec get_$1(non_neg_integer() | String.t()) :: Result.maybe($2.t(), any())
def get_$1(id) when is_integer(id) or is_binary(id) do
	$2
	|> Private.Queries.$2.base()
	|> Private.Queries.$2.with_id(id)
	|> Repo.one()
	|> Result.from()
end

@spec update_$1($2.t(), map()) :: Result.ok_or($2.t(), any())
def update_$1(%$2{} = $1, %{} = params) do
	$1
	|> $2.changeset(params)
	|> Repo.update()
end

@spec delete_$1($2.t()) :: Result.ok_or($2.t(), any())
def delete_$1(%$2{} = $1) do
	Repo.delete($1)
rescue
	Ecto.StaleEntryError -> {:error, :stale_entry}
end
endsnippet

snippet genserver "GenServer" bm
alias __MODULE__

use GenServer

# Client

@spec start_link(Keyword.t()) :: GenServer.on_start()
def start_link(_opts \\\\ []) do
	GenServer.start_link(${1:__MODULE__}, %{$2})
end

# @spec get_state(GenServer.server()) :: map()
# def get_state(server) do
# 	GenServer.call(server, :get_state)
# end
#
# @spec store(GenServer.server(), atom(), any()) :: :ok | {:error, any()}
# def store(server, key, value) do
# 	GenServer.cast(server, {:store, key, value})
# end

# Server

@impl GenServer
def init(state = %{}) do
	Process.set_label($1)
	{:ok, state}
end

# @impl GenServer
# def handle_call(:get_state, _from, %{} = state) do
# 	reply = state
# 	{:reply, reply, state}
# end
#
# @impl GenServer
# def handle_cast({:store, key, value}, %{} = state) do
# 	state = Map.put(state, key, value)
# 	{:noreply, state}
# end
endsnippet

snippet handle_call "GenServer handle_call" bm
@impl GenServer
def handle_call(${1::get_state}, _from, ${2:%{} = state}) do
	${3:reply = state}
	{:reply, reply, state}
end
endsnippet

snippet handle_cast "GenServer handle_cast" bm
@impl GenServer
def handle_cast(${1:{:store, key, value}}, ${2:%{} = state}) do
	${3:state = Map.put(state, key, value)}
	{:noreply, state}
end
endsnippet

snippet handle_info "GenServer handle_info" bm
@impl GenServer
def handle_info(${1:message}, ${2:%{} = state}) do
	${3:dbg(message)}
	{:noreply, state}
end
endsnippet

snippet testmod "Simple test module" b
defmodule $1 do
	@moduledoc false

	use ExUnit.Case, async: true$2
end
endsnippet

snippet test "Test function" b
test "$1"${2:, %\{\} = context} do
	${3:assert true}
end
endsnippet

snippet tagcap "@tag :capture_log" b
@tag :capture_log
endsnippet

snippet doc "@doc tag" b
@doc """
$1
"""
endsnippet

snippet def "Function with @spec" b
@spec $1($3)
def $1($2) do$4
end
endsnippet

snippet defp "Private function with @spec" b
@spec $1($3)
defp $1($2) do$4
end
endsnippet

snippet err "{:error, reason} -> {:error, reason}" b
{:${1:error}, ${2:reason}} -> {:$1, $2}
endsnippet

snippet nn "name: name" i
${1:name}: $1
endsnippet

snippet nns "''name'' => name" i
"${1:name}" => $1
endsnippet
