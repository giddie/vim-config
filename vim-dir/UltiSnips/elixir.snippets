snippet mod "Module with @moduledoc" b
defmodule $1 do
	@moduledoc ${2:false}
end
endsnippet

snippet privmod "Module without @moduledoc" b
defmodule $1 do
	# $2

	@moduledoc false$3
end
endsnippet

snippet struct "defstruct with typespec" bm
alias __MODULE__, as: Self

@enforce_keys [$1]
defstruct @enforce_keys

@type t :: %Self{$2}$3
endsnippet

snippet schema "Ecto schema" bm
alias __MODULE__, as: Self
alias Ecto.Changeset

use Ecto.Schema
import Ecto.Changeset

@primary_key false
embedded_schema do
	$1
	timestamps(type: :utc_datetime_usec)
end

@type t :: %Self{$2}$4

@spec new(map() | list()) :: {:ok, Self.t()} | {:error, Changeset.t()}
def new(params \\\\ %{}), do: changeset_for_new(params) |> apply_action(:new)

@spec new!(map() | list()) :: Self.t()
def new!(params \\\\ %{}), do: changeset_for_new(params) |> apply_action!(:new)

@doc """
Use this instead of \`new/1\` to get Dialyzer to check field types on the input struct.
"""
@spec from_struct(Self.t()) :: {:ok, Self.t()} | {:error, Changeset.t()}
def from_struct(%Self{} = self), do: self |> Map.from_struct() |> new()

@spec changeset_for_new(map() | list()) :: Changeset.t()
defp changeset_for_new(params) do
	change(%Self{id: params[:id]})
	|> changeset(Enum.into(params, %{}))
end

@spec changeset(Self.t() | Changeset.t(), Self.t() | map()) :: Changeset.t()
def changeset(self, params \\\\ %{})

def changeset(%Self{} = self, %Self{} = params) do
	changeset(self, Map.from_struct(params))
end

def changeset(%Self{} = self, params) do
	change(self) |> changeset(params)
end

def changeset(%Changeset{} = changeset, params) do
	changeset
	|> cast(params, [${1/.*?(:.*?),.*?(?:\n|$)/\n			$1,/g}
	])
	|> validate_required([${1/.*?(:.*?),.*?(?:\n|$)/\n			$1,/g}$3
	])
end
endsnippet

snippet querymod "Ecto query module" bm
defmodule $1.Private.Queries.$2 do
	@moduledoc false

	alias $1.$2

	import Ecto.Query

	@type query :: ${2/.*\.(.*)$/$1/} | Ecto.Query.t()

	@spec base(query()) :: Ecto.Query.t()
	def base(query) do
		from x in query, order_by: [asc: :id]
	end
end
endsnippet

snippet query "Ecto query function" b
@spec $1(query()$3) :: Ecto.Query.t()
def $1(query$2) do
	from x in query, where:$4
end
endsnippet

snippet genserver "GenServer" bm
alias __MODULE__, as: Self

use GenServer

# Client

@spec start_link(map()) :: {:ok, pid()}
def start_link(${1:%{} = state}) do
	GenServer.start_link(Self, ${2:state})
end

@spec get_state(pid()) :: map()
def get_state(pid) do
	GenServer.call(pid, :get_state)
end

@spec store(pid(), atom(), any()) :: :ok | {:error, any()}
def store(pid, key, value) do
	GenServer.cast(pid, {:store, key, value})
end

# Server

@impl GenServer
def init(${3:%{} = state}) do
	{:ok, ${4:state}}
end

@impl GenServer
def handle_call(:get_state, _from, %{} = state) do
	reply = state
	{:reply, reply, state}
end

@impl GenServer
def handle_cast({:store, key, value}, %{} = state) do
	state = Map.put(state, key, value)
	{:noreply, state}
end
endsnippet

snippet testmod "Simple test module" b
defmodule $1 do
	@moduledoc false

	use ExUnit.Case, async: true$2
end
endsnippet

snippet test "Test function" b
test "$1" do
	${2:assert true}
end
endsnippet

snippet doc "@doc tag" b
@doc """
$1
"""
endsnippet

snippet def "Function with @spec" b
@spec $1($3)
def $1($2) do$4
end
endsnippet

snippet defp "Private function with @spec" b
@spec $1($3)
defp $1($2) do$4
end
endsnippet

snippet err "{:error, reason} -> {:error, reason}" b
{:${1:error}, ${2:reason}} -> {:$1, $2}
endsnippet

snippet nn "name: name" i
${1:name}: $1
endsnippet

snippet nns "''name'' => name" i
"${1:name}" => $1
endsnippet
